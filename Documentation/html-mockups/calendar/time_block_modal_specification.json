{
  "component": "time_block_creation_modal",
  "description": "Interactive time block creation modal for calendar integration with linking to goals, tasks, and habits",
  "location": "Triggered from calendar time slots and quick add button",
  
  "html_structure": {
    "modal_overlay": {
      "class": "modal-overlay",
      "id": "timeBlockModal",
      "attributes": {
        "style": "display: none"
      },
      "elements": [
        {
          "element": "div",
          "class": "modal",
          "children": [
            {
              "element": "div",
              "class": "modal-header",
              "children": [
                {
                  "element": "div",
                  "class": "modal-title",
                  "content": "Create Time Block"
                },
                {
                  "element": "button",
                  "class": "close-btn",
                  "attributes": {
                    "onclick": "closeModal()"
                  },
                  "content": "‚úï"
                }
              ]
            },
            {
              "element": "div",
              "class": "modal-body",
              "content": "Form sections defined below"
            },
            {
              "element": "div",
              "class": "modal-footer",
              "children": [
                {
                  "element": "button",
                  "class": "btn btn-secondary",
                  "attributes": {
                    "onclick": "closeModal()"
                  },
                  "content": "Cancel"
                },
                {
                  "element": "button",
                  "class": "btn btn-primary",
                  "attributes": {
                    "onclick": "createTimeBlock()"
                  },
                  "content": "‚ú® Create Time Block"
                }
              ]
            }
          ]
        }
      ]
    },
    "block_type_section": {
      "class": "block-type-section",
      "elements": [
        {
          "element": "label",
          "class": "section-label",
          "content": "Block Type"
        },
        {
          "element": "div",
          "class": "block-types",
          "children": [
            {
              "element": "div",
              "class": "block-type selected",
              "attributes": {
                "data-type": "focus"
              },
              "children": [
                {
                  "element": "div",
                  "class": "block-type-icon",
                  "content": "üß†"
                },
                {
                  "element": "div",
                  "class": "block-type-name",
                  "content": "Focus Work"
                },
                {
                  "element": "div",
                  "class": "block-type-desc",
                  "content": "Deep work session"
                }
              ]
            },
            {
              "element": "div",
              "class": "block-type",
              "attributes": {
                "data-type": "meeting"
              },
              "children": [
                {
                  "element": "div",
                  "class": "block-type-icon",
                  "content": "üíº"
                },
                {
                  "element": "div",
                  "class": "block-type-name",
                  "content": "Meeting"
                },
                {
                  "element": "div",
                  "class": "block-type-desc",
                  "content": "Scheduled meetings"
                }
              ]
            },
            {
              "element": "div",
              "class": "block-type",
              "attributes": {
                "data-type": "learning"
              },
              "children": [
                {
                  "element": "div",
                  "class": "block-type-icon",
                  "content": "üìö"
                },
                {
                  "element": "div",
                  "class": "block-type-name",
                  "content": "Learning"
                },
                {
                  "element": "div",
                  "class": "block-type-desc",
                  "content": "Study & courses"
                }
              ]
            },
            {
              "element": "div",
              "class": "block-type",
              "attributes": {
                "data-type": "break"
              },
              "children": [
                {
                  "element": "div",
                  "class": "block-type-icon",
                  "content": "‚òï"
                },
                {
                  "element": "div",
                  "class": "block-type-name",
                  "content": "Break"
                },
                {
                  "element": "div",
                  "class": "block-type-desc",
                  "content": "Rest & recharge"
                }
              ]
            },
            {
              "element": "div",
              "class": "block-type",
              "attributes": {
                "data-type": "creative"
              },
              "children": [
                {
                  "element": "div",
                  "class": "block-type-icon",
                  "content": "üé®"
                },
                {
                  "element": "div",
                  "class": "block-type-name",
                  "content": "Creative"
                },
                {
                  "element": "div",
                  "class": "block-type-desc",
                  "content": "Creative work"
                }
              ]
            },
            {
              "element": "div",
              "class": "block-type",
              "attributes": {
                "data-type": "admin"
              },
              "children": [
                {
                  "element": "div",
                  "class": "block-type-icon",
                  "content": "üìã"
                },
                {
                  "element": "div",
                  "class": "block-type-name",
                  "content": "Admin"
                },
                {
                  "element": "div",
                  "class": "block-type-desc",
                  "content": "Administrative tasks"
                }
              ]
            }
          ]
        }
      ]
    },
    "form_fields": {
      "title_field": {
        "element": "input",
        "class": "form-input",
        "id": "blockTitle",
        "attributes": {
          "type": "text",
          "placeholder": "What will you work on?",
          "required": true
        }
      },
      "description_field": {
        "element": "textarea",
        "class": "form-input form-textarea",
        "id": "blockDescription",
        "attributes": {
          "placeholder": "Add details about this time block...",
          "rows": "3"
        }
      },
      "date_field": {
        "element": "input",
        "class": "form-input",
        "id": "blockDate",
        "attributes": {
          "type": "date",
          "required": true
        }
      },
      "time_field": {
        "element": "input",
        "class": "form-input",
        "id": "blockStartTime",
        "attributes": {
          "type": "time",
          "required": true
        }
      },
      "duration_preset": {
        "element": "select",
        "class": "form-input",
        "id": "durationPreset",
        "options": [
          { "value": "60", "text": "1 hour" },
          { "value": "90", "text": "1.5 hours" },
          { "value": "120", "text": "2 hours", "selected": true },
          { "value": "150", "text": "2.5 hours" },
          { "value": "180", "text": "3 hours" },
          { "value": "210", "text": "3.5 hours" },
          { "value": "240", "text": "4 hours" },
          { "value": "custom", "text": "Custom time" }
        ]
      },
      "custom_duration": {
        "element": "input",
        "class": "form-input",
        "id": "customDuration",
        "attributes": {
          "type": "text",
          "placeholder": "2:30",
          "pattern": "[0-9]:[0-5][0-9]",
          "style": "display: none"
        }
      }
    },
    "visual_customization": {
      "icon_display": {
        "class": "icon-display",
        "attributes": {
          "onclick": "toggleIconGrid()"
        },
        "content": "üß†"
      },
      "icon_grid": {
        "class": "icon-grid",
        "id": "iconGrid",
        "icons": [
          "üß†", "üíª", "üìù", "üéØ", "üíº", "üìû",
          "üìö", "üé®", "‚òï", "üèÉ", "üßò", "üìã"
        ]
      },
      "color_grid": {
        "class": "color-grid",
        "colors": [
          { "colors": "#FF7101,#e55a00", "default": true },
          { "colors": "#3B82F6,#1E40AF" },
          { "colors": "#22C55E,#15803D" },
          { "colors": "#A855F7,#7C3AED" },
          { "colors": "#EF4444,#DC2626" },
          { "colors": "#F59E0B,#D97706" },
          { "colors": "#8B5CF6,#7C3AED" },
          { "colors": "#06B6D4,#0891B2" }
        ]
      }
    },
    "advanced_options": {
      "link_to_item": {
        "element": "select",
        "class": "form-input",
        "id": "linkToItem",
        "optgroups": [
          {
            "label": "Goals",
            "options": "Dynamic from user's goals"
          },
          {
            "label": "Tasks", 
            "options": "Dynamic from user's tasks"
          },
          {
            "label": "Habits",
            "options": "Dynamic from user's habits"
          }
        ]
      },
      "reminder_time": {
        "element": "select",
        "class": "form-input",
        "id": "reminderTime",
        "options": [
          { "value": "", "text": "No reminder" },
          { "value": "15", "text": "15 minutes before" },
          { "value": "30", "text": "30 minutes before" },
          { "value": "45", "text": "45 minutes before" },
          { "value": "60", "text": "1 hour before" }
        ]
      }
    },
    "preview_section": {
      "class": "preview-section",
      "elements": [
        {
          "element": "div",
          "class": "preview-label",
          "content": "Preview"
        },
        {
          "element": "div",
          "class": "preview-block",
          "id": "previewBlock",
          "content": "Dynamic preview content"
        }
      ]
    }
  },

  "css_specifications": {
    "modal_styles": {
      "modal_overlay": {
        "position": "fixed",
        "top": "0",
        "left": "0",
        "width": "100%",
        "height": "100%",
        "background": "rgba(0, 0, 0, 0.6)",
        "display": "flex",
        "align-items": "center",
        "justify-content": "center",
        "z-index": "1000",
        "animation": "fadeIn 0.3s ease-out"
      },
      "modal": {
        "background": "white",
        "border-radius": "20px",
        "width": "100%",
        "max-width": "480px",
        "max-height": "90vh",
        "overflow": "hidden",
        "box-shadow": "0 20px 60px rgba(0, 0, 0, 0.3)",
        "animation": "modalSlideUp 0.3s ease-out"
      },
      "modal_header": {
        "display": "flex",
        "align-items": "center",
        "justify-content": "space-between",
        "padding": "24px 24px 16px",
        "border-bottom": "1px solid #f1f5f9"
      },
      "modal_title": {
        "font-size": "24px",
        "font-weight": "700",
        "color": "#2d3748"
      },
      "close_btn": {
        "width": "36px",
        "height": "36px",
        "border": "none",
        "background": "#f8fafc",
        "border-radius": "8px",
        "cursor": "pointer",
        "display": "flex",
        "align-items": "center",
        "justify-content": "center",
        "font-size": "18px",
        "color": "#64748b",
        "transition": "all 0.2s",
        "hover": {
          "background": "#e2e8f0",
          "color": "#475569"
        }
      }
    },
    "block_type_styles": {
      "block_types": {
        "display": "grid",
        "grid-template-columns": "repeat(2, 1fr)",
        "gap": "12px"
      },
      "block_type": {
        "display": "flex",
        "flex-direction": "column",
        "align-items": "center",
        "gap": "8px",
        "padding": "16px 12px",
        "border": "2px solid #e2e8f0",
        "border-radius": "12px",
        "cursor": "pointer",
        "transition": "all 0.2s",
        "background": "white",
        "text-align": "center",
        "hover": {
          "border-color": "#cbd5e1",
          "transform": "translateY(-1px)"
        },
        "selected": {
          "border-color": "#FF7101",
          "background": "#fff7ed",
          "box-shadow": "0 0 0 3px rgba(255, 113, 1, 0.1)"
        }
      },
      "block_type_icon": {
        "font-size": "28px"
      },
      "block_type_name": {
        "font-size": "14px",
        "font-weight": "600",
        "color": "#374151"
      },
      "block_type_desc": {
        "font-size": "11px",
        "color": "#6b7280",
        "line-height": "1.3"
      }
    },
    "form_styles": {
      "form_input": {
        "width": "100%",
        "padding": "12px 16px",
        "border": "2px solid #e2e8f0",
        "border-radius": "8px",
        "font-size": "16px",
        "transition": "border-color 0.2s",
        "background": "white",
        "outline": "none",
        "focus": {
          "border-color": "#FF7101",
          "box-shadow": "0 0 0 3px rgba(255, 113, 1, 0.1)"
        }
      },
      "duration_controls": {
        "display": "flex",
        "gap": "12px",
        "align-items": "center"
      },
      "datetime_grid": {
        "display": "grid",
        "grid-template-columns": "1fr 1fr",
        "gap": "12px"
      }
    },
    "visual_customization_styles": {
      "visual_section": {
        "display": "grid",
        "grid-template-columns": "auto 1fr",
        "gap": "20px",
        "align-items": "start"
      },
      "icon_display": {
        "width": "80px",
        "height": "80px",
        "border-radius": "16px",
        "background": "linear-gradient(135deg, #FF7101, #e55a00)",
        "display": "flex",
        "align-items": "center",
        "justify-content": "center",
        "font-size": "32px",
        "color": "white",
        "cursor": "pointer",
        "transition": "all 0.2s",
        "border": "3px solid transparent",
        "hover": {
          "transform": "scale(1.05)",
          "box-shadow": "0 4px 12px rgba(255, 113, 1, 0.3)"
        }
      },
      "icon_grid": {
        "display": "none",
        "grid-template-columns": "repeat(6, 1fr)",
        "gap": "8px",
        "margin-top": "12px",
        "padding": "12px",
        "background": "#f8fafc",
        "border-radius": "8px",
        "max-height": "120px",
        "overflow-y": "auto",
        "visible": {
          "display": "grid"
        }
      },
      "icon_option": {
        "width": "40px",
        "height": "40px",
        "border-radius": "8px",
        "background": "white",
        "display": "flex",
        "align-items": "center",
        "justify-content": "center",
        "font-size": "18px",
        "cursor": "pointer",
        "transition": "all 0.2s",
        "border": "2px solid transparent",
        "hover": {
          "background": "#f1f5f9",
          "transform": "scale(1.1)"
        },
        "selected": {
          "border-color": "#FF7101",
          "background": "#fff7ed"
        }
      },
      "color_grid": {
        "display": "grid",
        "grid-template-columns": "repeat(4, 1fr)",
        "gap": "8px"
      },
      "color_option": {
        "width": "40px",
        "height": "40px",
        "border-radius": "8px",
        "cursor": "pointer",
        "transition": "all 0.2s",
        "border": "3px solid transparent",
        "position": "relative",
        "hover": {
          "transform": "scale(1.1)"
        },
        "selected": {
          "border-color": "#374151",
          "transform": "scale(1.1)"
        },
        "gradient": {
          "background": "linear-gradient(135deg, var(--color-1), var(--color-2))"
        }
      }
    },
    "advanced_options_styles": {
      "advanced_toggle": {
        "display": "flex",
        "align-items": "center",
        "gap": "12px",
        "cursor": "pointer",
        "padding": "12px 16px",
        "background": "#f8fafc",
        "border-radius": "8px",
        "transition": "all 0.2s",
        "hover": {
          "background": "#f1f5f9"
        },
        "expanded": {
          "background": "#fff7ed",
          "border": "1px solid #FF7101"
        }
      },
      "advanced_content": {
        "display": "none",
        "padding": "16px",
        "background": "#f8fafc",
        "border-radius": "8px",
        "margin-top": "8px",
        "animation": "slideDown 0.3s ease-out",
        "expanded": {
          "display": "block"
        }
      }
    },
    "preview_styles": {
      "preview_section": {
        "margin-bottom": "20px",
        "padding": "16px",
        "background": "#f8fafc",
        "border-radius": "8px",
        "border": "1px solid #e2e8f0"
      },
      "preview_label": {
        "font-size": "12px",
        "font-weight": "600",
        "color": "#64748b",
        "text-transform": "uppercase",
        "letter-spacing": "0.5px",
        "margin-bottom": "8px"
      },
      "preview_block": {
        "background": "linear-gradient(135deg, #FF7101, #e55a00)",
        "color": "white",
        "padding": "12px 16px",
        "border-radius": "8px",
        "display": "flex",
        "align-items": "center",
        "gap": "12px"
      }
    },
    "button_styles": {
      "btn": {
        "padding": "12px 24px",
        "border": "none",
        "border-radius": "8px",
        "cursor": "pointer",
        "font-size": "14px",
        "font-weight": "600",
        "transition": "all 0.2s",
        "display": "flex",
        "align-items": "center",
        "gap": "8px"
      },
      "btn_secondary": {
        "background": "#f3f4f6",
        "color": "#374151",
        "hover": {
          "background": "#e5e7eb"
        }
      },
      "btn_primary": {
        "background": "linear-gradient(135deg, #FF7101, #e55a00)",
        "color": "white",
        "box-shadow": "0 2px 8px rgba(255, 113, 1, 0.3)",
        "hover": {
          "background": "linear-gradient(135deg, #e55a00, #cc4900)",
          "box-shadow": "0 4px 12px rgba(255, 113, 1, 0.4)",
          "transform": "translateY(-1px)"
        },
        "disabled": {
          "background": "#9ca3af",
          "cursor": "not-allowed",
          "transform": "none",
          "box-shadow": "none"
        }
      }
    },
    "responsive": {
      "mobile_breakpoint": "768px",
      "changes": {
        "modal": {
          "margin": "16px",
          "max-width": "none"
        },
        "block_types": {
          "grid-template-columns": "1fr"
        },
        "visual_section": {
          "grid-template-columns": "1fr",
          "text-align": "center"
        },
        "duration_controls": {
          "flex-direction": "column"
        },
        "color_grid": {
          "grid-template-columns": "repeat(6, 1fr)"
        },
        "modal_footer": {
          "flex-direction": "column-reverse"
        },
        "btn": {
          "width": "100%",
          "justify-content": "center"
        }
      }
    }
  },

  "javascript_functions": {
    "modal_management": {
      "showTimeBlockModal": {
        "description": "Opens time block modal with optional pre-filled time",
        "parameters": ["time (optional)"],
        "implementation": "Set start time, show modal, update preview",
        "code": "function showTimeBlockModal(time = null) {\n    if (time) {\n        document.getElementById('blockStartTime').value = time;\n    }\n    document.getElementById('timeBlockModal').style.display = 'flex';\n    updatePreview();\n}"
      },
      "closeModal": {
        "description": "Closes time block modal and resets form",
        "parameters": [],
        "implementation": "Hide modal, optionally reset form fields",
        "code": "function closeModal() {\n    document.getElementById('timeBlockModal').style.display = 'none';\n    // Optional: resetForm();\n}"
      },
      "toggleIconGrid": {
        "description": "Shows/hides icon selection grid",
        "parameters": [],
        "implementation": "Toggle visibility class on icon grid",
        "code": "function toggleIconGrid() {\n    const iconGrid = document.getElementById('iconGrid');\n    iconGrid.classList.toggle('visible');\n}"
      },
      "toggleAdvanced": {
        "description": "Expands/collapses advanced options section",
        "parameters": [],
        "implementation": "Toggle expanded class on toggle and content",
        "code": "function toggleAdvanced() {\n    const toggle = document.querySelector('.advanced-toggle');\n    const content = document.getElementById('advancedContent');\n    \n    toggle.classList.toggle('expanded');\n    content.classList.toggle('expanded');\n}"
      }
    },
    "form_handling": {
      "updatePreview": {
        "description": "Updates preview block with current form data",
        "parameters": [],
        "implementation": "Read form values, calculate duration, format display",
        "code": "function updatePreview() {\n    const title = document.getElementById('blockTitle').value || 'New Time Block';\n    const date = document.getElementById('blockDate').value;\n    const startTime = document.getElementById('blockStartTime').value;\n    \n    let totalMinutes = getDurationInMinutes();\n    const start = new Date(`${date}T${startTime}`);\n    const end = new Date(start.getTime() + totalMinutes * 60000);\n    \n    updatePreviewDisplay(title, start, end, totalMinutes);\n}"
      },
      "getDurationInMinutes": {
        "description": "Gets duration in minutes from preset or custom input",
        "parameters": [],
        "returns": "Integer (duration in minutes)",
        "implementation": "Check if custom or preset, parse accordingly",
        "code": "function getDurationInMinutes() {\n    const preset = document.getElementById('durationPreset').value;\n    \n    if (preset === 'custom') {\n        const custom = document.getElementById('customDuration').value;\n        if (custom) {\n            const [hours, minutes] = custom.split(':').map(Number);\n            return hours * 60 + minutes;\n        }\n    }\n    \n    return parseInt(preset) || 120;\n}"
      },
      "validateCustomDuration": {
        "description": "Validates HH:MM format for custom duration",
        "parameters": ["value"],
        "returns": "Boolean",
        "implementation": "Regex pattern matching for time format",
        "code": "function validateCustomDuration(value) {\n    const pattern = /^[0-9]:[0-5][0-9]$/;\n    return pattern.test(value);\n}"
      },
      "createTimeBlock": {
        "description": "Collects form data and creates time block",
        "parameters": [],
        "implementation": "Validate, collect data, save via API, close modal",
        "code": "function createTimeBlock() {\n    const blockData = collectFormData();\n    \n    if (validateBlockData(blockData)) {\n        saveTimeBlock(blockData)\n            .then(() => {\n                showSuccessMessage('Time block created successfully!');\n                closeModal();\n                refreshCalendarView();\n            })\n            .catch(error => {\n                showErrorMessage('Failed to create time block. Please try again.');\n            });\n    }\n}"
      }
    },
    "block_type_management": {
      "selectBlockType": {
        "description": "Handles block type selection and updates defaults",
        "parameters": ["blockType"],
        "implementation": "Update selected state, set defaults for icon/title",
        "defaults": {
          "focus": { "icon": "üß†", "title": "Deep Work Session" },
          "meeting": { "icon": "üíº", "title": "Team Meeting" },
          "learning": { "icon": "üìö", "title": "Learning Block" },
          "break": { "icon": "‚òï", "title": "Break Time" },
          "creative": { "icon": "üé®", "title": "Creative Work" },
          "admin": { "icon": "üìã", "title": "Administrative Tasks" }
        }
      },
      "updateBlockTypeDefaults": {
        "description": "Updates form fields based on selected block type",
        "parameters": ["blockType"],
        "implementation": "Set icon, title, and color based on type defaults"
      }
    },
    "visual_customization": {
      "selectIcon": {
        "description": "Handles icon selection and updates display",
        "parameters": ["iconElement"],
        "implementation": "Update selected state, change display icon, update preview",
        "code": "function selectIcon(iconElement) {\n    document.querySelectorAll('.icon-option').forEach(opt => {\n        opt.classList.remove('selected');\n    });\n    \n    iconElement.classList.add('selected');\n    selectedIcon = iconElement.dataset.icon;\n    \n    document.querySelector('.icon-display').textContent = selectedIcon;\n    updatePreview();\n}"
      },
      "selectColor": {
        "description": "Handles color selection and updates gradient",
        "parameters": ["colorElement"],
        "implementation": "Update selected state, change icon display background, update preview",
        "code": "function selectColor(colorElement) {\n    document.querySelectorAll('.color-option').forEach(opt => {\n        opt.classList.remove('selected');\n    });\n    \n    colorElement.classList.add('selected');\n    selectedColors = colorElement.dataset.colors.split(',');\n    \n    updateIconDisplayBackground();\n    updatePreview();\n}"
      }
    },
    "duration_handling": {
      "handleDurationPresetChange": {
        "description": "Handles duration preset selection and custom input toggle",
        "parameters": ["selectElement"],
        "implementation": "Show/hide custom input, update preview",
        "code": "function handleDurationPresetChange(selectElement) {\n    const customInput = document.getElementById('customDuration');\n    \n    if (selectElement.value === 'custom') {\n        customInput.style.display = 'block';\n        customInput.focus();\n    } else {\n        customInput.style.display = 'none';\n        updatePreview();\n    }\n}"
      },
      "handleCustomDurationInput": {
        "description": "Validates and processes custom duration input",
        "parameters": ["inputElement"],
        "implementation": "Validate format, update preview if valid",
        "code": "function handleCustomDurationInput(inputElement) {\n    const value = inputElement.value;\n    \n    if (validateCustomDuration(value) || value === '') {\n        updatePreview();\n    } else {\n        // Show validation error or prevent invalid input\n        inputElement.classList.add('error');\n    }\n}"
      }
    },
    "utility_functions": {
      "formatTime": {
        "description": "Formats Date object to HH:MM string",
        "parameters": ["date"],
        "returns": "String (formatted time)",
        "code": "function formatTime(date) {\n    return date.toLocaleTimeString('en-US', {\n        hour: '2-digit',\n        minute: '2-digit',\n        hour12: false\n    });\n}"
      },
      "formatDate": {
        "description": "Formats date string to display format",
        "parameters": ["dateString"],
        "returns": "String (formatted date)",
        "code": "function formatDate(dateString) {\n    const date = new Date(dateString);\n    return date.toLocaleDateString('en-US', {\n        month: 'short',\n        day: 'numeric'\n    });\n}"
      },
      "formatDuration": {
        "description": "Formats minutes to readable duration string",
        "parameters": ["minutes"],
        "returns": "String (formatted duration)",
        "code": "function formatDuration(minutes) {\n    const hours = Math.floor(minutes / 60);\n    const mins = minutes % 60;\n    \n    if (hours > 0 && mins > 0) {\n        return `${hours}h ${mins}m`;\n    } else if (hours > 0) {\n        return `${hours}h`;\n    } else {\n        return `${mins}m`;\n    }\n}"
      },
      "collectFormData": {
        "description": "Collects all form data into structured object",
        "parameters": [],
        "returns": "Object (time block data)",
        "code": "function collectFormData() {\n    return {\n        title: document.getElementById('blockTitle').value,\n        description: document.getElementById('blockDescription').value,\n        date: document.getElementById('blockDate').value,\n        startTime: document.getElementById('blockStartTime').value,\n        duration: getDurationInMinutes(),\n        icon: selectedIcon,\n        colors: selectedColors,\n        type: selectedBlockType,\n        linkedItem: document.getElementById('linkToItem').value,\n        reminder: document.getElementById('reminderTime').value\n    };\n}"
      }
    }
  },

  "backend_integration": {
    "api_endpoints": {
      "create_time_block": {
        "url": "/api/time-blocks",
        "method": "POST",
        "description": "Create a new time block",
        "authentication": "required",
        "payload": {
          "title": "string (required)",
          "description": "string (optional)",
          "date": "string (YYYY-MM-DD, required)",
          "start_time": "string (HH:MM, required)",
          "duration_minutes": "integer (required)",
          "block_type": "string (focus|meeting|learning|break|creative|admin)",
          "icon": "string (emoji)",
          "color_start": "string (hex color)",
          "color_end": "string (hex color)",
          "linked_item_type": "string (goal|task|habit|null)",
          "linked_item_id": "integer (optional)",
          "reminder_minutes": "integer (optional, minutes before start)"
        },
        "response": {
          "success": "boolean",
          "time_block_id": "integer",
          "message": "string"
        },
        "error_codes": {
          "400": "Invalid input data",
          "409": "Time slot conflict",
          "422": "Validation errors"
        }
      },
      "get_linkable_items": {
        "url": "/api/linkable-items",
        "method": "GET",
        "description": "Get user's goals, tasks, and habits for linking",
        "parameters": {
          "types": "string (comma-separated: goals,tasks,habits)"
        },
        "response": {
          "goals": [
            {
              "id": "integer",
              "name": "string",
              "icon": "string",
              "color": "string"
            }
          ],
          "tasks": [
            {
              "id": "integer",
              "name": "string",
              "icon": "string",
              "color": "string",
              "due_date": "string (optional)"
            }
          ],
          "habits": [
            {
              "id": "integer",
              "name": "string",
              "icon": "string",
              "color": "string",
              "frequency_type": "string"
            }
          ]
        }
      },
      "check_time_conflicts": {
        "url": "/api/time-blocks/conflicts",
        "method": "POST",
        "description": "Check for time slot conflicts before creation",
        "payload": {
          "date": "string (YYYY-MM-DD)",
          "start_time": "string (HH:MM)",
          "duration_minutes": "integer"
        },
        "response": {
          "has_conflicts": "boolean",
          "conflicts": [
            {
              "id": "integer",
              "title": "string",
              "start_time": "string",
              "end_time": "string"
            }
          ]
        }
      }
    },
    "database_schema": {
      "time_blocks_table": {
        "table_name": "time_blocks",
        "create_sql": "CREATE TABLE time_blocks (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    user_id INTEGER NOT NULL,\n    uuid VARCHAR(36) UNIQUE NOT NULL,\n    \n    -- Core information\n    title VARCHAR(255) NOT NULL,\n    description TEXT,\n    block_type VARCHAR(20) DEFAULT 'focus',\n    \n    -- Visual customization\n    icon VARCHAR(100) DEFAULT 'üß†',\n    color_start VARCHAR(7) DEFAULT '#FF7101',\n    color_end VARCHAR(7) DEFAULT '#e55a00',\n    \n    -- Scheduling\n    date DATE NOT NULL,\n    start_time TIME NOT NULL,\n    duration_minutes INTEGER NOT NULL,\n    \n    -- Linking\n    linked_item_type VARCHAR(10),  -- 'goal', 'task', 'habit'\n    linked_item_id INTEGER,\n    \n    -- Reminders\n    reminder_minutes INTEGER,\n    reminder_sent BOOLEAN DEFAULT FALSE,\n    \n    -- Status\n    status VARCHAR(20) DEFAULT 'scheduled',  -- scheduled, in_progress, completed, cancelled\n    completion_notes TEXT,\n    \n    -- Metadata\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    \n    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,\n    \n    INDEX idx_time_blocks_user_date (user_id, date),\n    INDEX idx_time_blocks_datetime (date, start_time),\n    INDEX idx_time_blocks_linked (linked_item_type, linked_item_id),\n    INDEX idx_time_blocks_reminder (reminder_minutes, reminder_sent)\n);",
        "constraints": [
          "CHECK (duration_minutes > 0 AND duration_minutes <= 480)",
          "CHECK (block_type IN ('focus', 'meeting', 'learning', 'break', 'creative', 'admin'))",
          "CHECK (linked_item_type IN ('goal', 'task', 'habit') OR linked_item_type IS NULL)",
          "CHECK (reminder_minutes IN (15, 30, 45, 60) OR reminder_minutes IS NULL)"
        ]
      }
    }
  },

  "service_layer_implementation": {
    "time_block_service": {
      "file": "services/time_block_service.py",
      "methods": {
        "create_time_block": {
          "description": "Creates a new time block with validation",
          "parameters": ["user_id", "block_data"],
          "returns": "TimeBlock object or validation errors",
          "implementation": "def create_time_block(user_id, block_data):\n    # Validate input data\n    errors = validate_time_block_data(block_data)\n    if errors:\n        raise ValidationError(errors)\n    \n    # Check for time conflicts\n    conflicts = check_time_conflicts(user_id, block_data)\n    if conflicts:\n        raise ConflictError('Time slot already occupied')\n    \n    # Create time block\n    time_block = TimeBlock(\n        user_id=user_id,\n        uuid=generate_uuid(),\n        **block_data\n    )\n    \n    db.session.add(time_block)\n    db.session.commit()\n    \n    # Schedule reminder if requested\n    if block_data.get('reminder_minutes'):\n        schedule_reminder(time_block)\n    \n    return time_block"
        },
        "check_time_conflicts": {
          "description": "Checks for overlapping time blocks",
          "parameters": ["user_id", "date", "start_time", "duration_minutes"],
          "returns": "List of conflicting time blocks",
          "implementation": "def check_time_conflicts(user_id, date, start_time, duration_minutes):\n    start_datetime = datetime.combine(date, start_time)\n    end_datetime = start_datetime + timedelta(minutes=duration_minutes)\n    \n    conflicts = TimeBlock.query.filter(\n        TimeBlock.user_id == user_id,\n        TimeBlock.date == date,\n        TimeBlock.status != 'cancelled',\n        # Check for overlap\n        or_(\n            and_(\n                TimeBlock.start_time <= start_time,\n                TimeBlock.start_time + TimeBlock.duration_minutes > start_time\n            ),\n            and_(\n                TimeBlock.start_time < end_datetime.time(),\n                TimeBlock.start_time >= start_time\n            )\n        )\n    ).all()\n    \n    return conflicts"
        },
        "get_linkable_items": {
          "description": "Retrieves user's goals, tasks, and habits for linking",
          "parameters": ["user_id", "item_types"],
          "returns": "Dictionary with categorized items",
          "implementation": "def get_linkable_items(user_id, item_types=['goals', 'tasks', 'habits']):\n    result = {}\n    \n    if 'goals' in item_types:\n        result['goals'] = Goal.query.filter_by(\n            user_id=user_id, \n            status='active'\n        ).all()\n    \n    if 'tasks' in item_types:\n        result['tasks'] = Task.query.filter_by(\n            user_id=user_id, \n            status='pending'\n        ).limit(20).all()\n    \n    if 'habits' in item_types:\n        result['habits'] = Habit.query.filter_by(\n            user_id=user_id, \n            status='active'\n        ).all()\n    \n    return result"
        }
      }
    },
    "reminder_service": {
      "file": "services/reminder_service.py",
      "methods": {
        "schedule_reminder": {
          "description": "Schedules a reminder for a time block",
          "parameters": ["time_block"],
          "implementation": "Integration with notification system"
        },
        "send_time_block_reminders": {
          "description": "Background task to send scheduled reminders",
          "parameters": [],
          "implementation": "Check for upcoming time blocks and send notifications"
        }
      }
    }
  },

  "validation_rules": {
    "time_block_validation": {
      "title": {
        "required": true,
        "min_length": 1,
        "max_length": 255,
        "error_message": "Title is required and must be less than 255 characters"
      },
      "description": {
        "required": false,
        "max_length": 1000
      },
      "date": {
        "required": true,
        "format": "YYYY-MM-DD",
        "future_only": false,
        "error_message": "Valid date is required"
      },
      "start_time": {
        "required": true,
        "format": "HH:MM",
        "error_message": "Valid start time is required"
      },
      "duration_minutes": {
        "required": true,
        "min": 15,
        "max": 480,
        "multiples_of": 15,
        "error_message": "Duration must be between 15 minutes and 8 hours"
      },
      "block_type": {
        "required": true,
        "allowed_values": ["focus", "meeting", "learning", "break", "creative", "admin"],
        "error_message": "Invalid block type"
      },
      "reminder_minutes": {
        "required": false,
        "allowed_values": [15, 30, 45, 60],
        "error_message": "Reminder must be 15, 30, 45, or 60 minutes before"
      }
    },
    "custom_duration_validation": {
      "pattern": "^[0-9]:[0-5][0-9]$",
      "max_hours": 8,
      "min_minutes": 15,
      "error_messages": {
        "format": "Duration must be in H:MM format (e.g., 2:30)",
        "too_long": "Maximum duration is 8 hours",
        "too_short": "Minimum duration is 15 minutes"
      }
    }
  },

  "event_handling": {
    "modal_events": {
      "open_modal": {
        "triggers": [
          "Click on calendar time slot",
          "Click quick add button",
          "Keyboard shortcut (Ctrl/Cmd + T)"
        ],
        "actions": [
          "Show modal overlay",
          "Pre-fill time if from time slot",
          "Focus on title input",
          "Initialize form defaults"
        ]
      },
      "close_modal": {
        "triggers": [
          "Click close button",
          "Click outside modal",
          "Press Escape key",
          "Successful form submission"
        ],
        "actions": [
          "Hide modal overlay",
          "Reset form (optional)",
          "Return focus to calendar",
          "Clear validation errors"
        ]
      }
    },
    "form_events": {
      "block_type_selection": {
        "trigger": "Click on block type card",
        "actions": [
          "Update selected state",
          "Change default icon and title",
          "Update preview",
          "Scroll to next section (mobile)"
        ]
      },
      "duration_change": {
        "triggers": [
          "Select duration preset",
          "Enter custom duration",
          "Focus/blur on custom input"
        ],
        "actions": [
          "Show/hide custom input",
          "Validate custom format",
          "Update preview",
          "Calculate end time"
        ]
      },
      "visual_customization": {
        "triggers": [
          "Click icon display",
          "Select icon from grid",
          "Select color option"
        ],
        "actions": [
          "Toggle icon grid visibility",
          "Update selected states",
          "Change preview appearance",
          "Update icon display background"
        ]
      }
    },
    "real_time_updates": {
      "preview_updates": {
        "triggers": [
          "Title input change",
          "Date/time change",
          "Duration change",
          "Visual selection change"
        ],
        "debounce": "300ms",
        "actions": [
          "Calculate end time",
          "Format display text",
          "Update preview colors",
          "Validate form data"
        ]
      }
    }
  },

  "integration_points": {
    "calendar_integration": {
      "time_slot_creation": {
        "description": "Create time block from calendar time slot click",
        "implementation": "Pass clicked time to modal, pre-fill start time",
        "data_flow": "Calendar ‚Üí Modal ‚Üí API ‚Üí Database ‚Üí Calendar refresh"
      },
      "conflict_detection": {
        "description": "Prevent overlapping time blocks",
        "implementation": "Real-time conflict checking during form input",
        "visual_feedback": "Highlight conflicts in calendar, warning messages"
      },
      "calendar_refresh": {
        "description": "Update calendar view after time block creation",
        "implementation": "Emit event or call refresh function",
        "optimization": "Only refresh affected time range"
      }
    },
    "goal_task_habit_linking": {
      "dropdown_population": {
        "description": "Populate link dropdown with user's items",
        "api_call": "/api/linkable-items",
        "caching": "Cache for session, refresh on item changes"
      },
      "progress_tracking": {
        "description": "Link time block completion to linked item progress",
        "implementation": "Update item progress when time block completed",
        "analytics": "Track time spent on goals/tasks/habits"
      }
    },
    "notification_system": {
      "reminder_scheduling": {
        "description": "Schedule notifications for time block reminders",
        "implementation": "Background job scheduler or queue system",
        "persistence": "Store reminder status in database"
      },
      "real_time_notifications": {
        "description": "Send push notifications for reminders",
        "channels": ["Browser push", "Email (optional)", "Mobile (future)"],
        "customization": "User preferences for notification types"
      }
    }
  },

  "testing_specifications": {
    "unit_tests": [
      "Duration calculation and formatting",
      "Custom duration validation",
      "Time conflict detection",
      "Form data collection and validation",
      "Preview update logic",
      "Icon and color selection"
    ],
    "integration_tests": [
      "Time block creation API",
      "Calendar integration",
      "Linkable items retrieval",
      "Conflict checking API",
      "Reminder scheduling"
    ],
    "ui_tests": [
      "Modal open/close behavior",
      "Form validation feedback",
      "Responsive design",
      "Keyboard navigation",
      "Touch interactions (mobile)",
      "Preview accuracy"
    ],
    "edge_cases": [
      "Maximum duration (8 hours)",
      "Minimum duration (15 minutes)",
      "Invalid custom duration format",
      "Time conflicts",
      "Network connectivity issues",
      "Large number of linkable items"
    ]
  },

  "performance_considerations": {
    "optimization_strategies": {
      "modal_loading": {
        "lazy_load": "Load linkable items only when advanced options expanded",
        "caching": "Cache linkable items for session duration",
        "pagination": "Limit linkable items shown (top 20 per category)"
      },
      "form_validation": {
        "debounced_validation": "Debounce real-time validation by 300ms",
        "client_side_first": "Validate on client before API calls",
        "async_conflict_check": "Non-blocking conflict detection"
      },
      "preview_updates": {
        "efficient_dom": "Update only changed preview elements",
        "css_transitions": "Use CSS for smooth visual transitions",
        "minimal_reflows": "Batch DOM updates where possible"
      }
    }
  },

  "accessibility_features": {
    "keyboard_navigation": {
      "tab_order": [
        "Block type selection",
        "Title input",
        "Description textarea", 
        "Date input",
        "Time input",
        "Duration controls",
        "Icon display",
        "Color options",
        "Advanced toggle",
        "Link dropdown",
        "Reminder dropdown",
        "Action buttons"
      ],
      "shortcuts": {
        "escape": "Close modal",
        "enter": "Submit form (when valid)",
        "arrow_keys": "Navigate block types and color options",
        "space": "Activate buttons and selections"
      }
    },
    "screen_reader_support": {
      "aria_labels": {
        "modal": "aria-label='Create time block dialog'",
        "block_types": "aria-label='Select block type'",
        "duration": "aria-label='Set duration'",
        "preview": "aria-live='polite' aria-label='Time block preview'"
      },
      "announcements": {
        "selection_changes": "Announce when block type or visual options change",
        "validation_errors": "Announce form validation messages",
        "success_feedback": "Announce successful time block creation"
      }
    },
    "visual_accessibility": {
      "color_contrast": "WCAG AA compliant contrast ratios for all text",
      "focus_indicators": "Clear focus rings on all interactive elements",
      "error_states": "Clear visual indicators for validation errors",
      "reduced_motion": "Respect prefers-reduced-motion for animations"
    }
  },

  "deployment_considerations": {
    "browser_compatibility": {
      "modern_browsers": "Chrome 80+, Firefox 75+, Safari 13+, Edge 80+",
      "fallbacks": "Graceful degradation for older browsers",
      "polyfills": "Include polyfills for Date/Time inputs if needed"
    },
    "performance_budgets": {
      "bundle_size": "Modal JS + CSS should be under 50KB compressed",
      "load_time": "Modal should open within 100ms",
      "api_response": "Time block creation should complete within 2 seconds"
    },
    "monitoring": {
      "error_tracking": "Log JavaScript errors and API failures",
      "usage_analytics": "Track modal usage patterns and conversion rates",
      "performance_metrics": "Monitor form submission times and error rates"
    }
  }
}